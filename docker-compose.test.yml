services:

  nginx-admin:
    image: nginx:1.22.0
    container_name: nginx_admin
    restart: always
    ports:
      - 8008:80
      - 8443:443
    volumes:
      - ./nginx_admin/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx_admin/conf_admin:/etc/nginx/conf.d:ro
      - ./nginx_admin/auth_static:/etc/nginx/html/swaggerui:ro
      - ./ui/ssl:/ssl:ro
    networks:
      - my-network
    depends_on:
      - admin
    env_file: .env

  authpostgres:
    image: postgres:13.7-alpine
    container_name: authpostgres
    restart: always
    environment:
      POSTGRES_DB: $AUTH_POSTGRES_DB
      POSTGRES_USER: $AUTH_POSTGRES_USER
      POSTGRES_PASSWORD: $AUTH_POSTGRES_PASSWORD
    ports:
      - 5433:5432
    volumes:
      - ./auth_db/postgres_config/set_schema.sql:/docker-entrypoint-initdb.d/schema.sql
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U app" ]
      interval: 15s
      timeout: 5s
      retries: 5
    networks:
      - my-network

  captcha:
    build:
      context: ./captcha
      dockerfile: Dockerfile_test
    image: captcha:${TAG}
    container_name: captcha
    volumes:
      - ./captcha:/home/flask
    environment:
      - THREADS=without
    expose:
      - 5000
    ports:
      - 5050:5000
    depends_on:
      - redis-auth
    command: /bin/bash -c "sleep 5; flask run --host=0.0.0.0;"
    networks:
      - my-network
    env_file: .env

  recaptcha:
    build:
      context: ./recaptcha
      dockerfile: Dockerfile_test
    image: recaptcha:${TAG}
    container_name: recaptcha
    volumes:
      - ./recaptcha:/home/flask
    environment:
      - THREADS=without
    expose:
      - 5000
    ports:
      - 5055:5000
    command: /bin/bash -c "sleep 5; flask run --host=0.0.0.0;"
    networks:
      - my-network
    env_file: .env

  auth:
    build:
      context: ./auth
      dockerfile: Dockerfile_test
    image: auth:${TAG}
    container_name: auth
    volumes:
      - ./auth:/home/flask
    environment:
      - THREADS=without
      - FLASK_DEBUG=1
    expose:
      - 5000
      - 50051
    ports:
      - 5000:5000
    depends_on:
      authpostgres:
        condition: service_healthy
    command: /bin/bash -c "service filebeat start; flask db upgrade; flask run --host=0.0.0.0"
    healthcheck:
      test: curl --fail -s http://auth:5000/auth/api/v1/ || exit 1
      interval: 10s
      timeout: 10s
      retries: 3
    networks:
      - my-network
    env_file: .env

  admin:
    build:
      context: ./admin
      dockerfile: Dockerfile_test
    image: admin:${TAG}
    container_name: admin
    volumes:
      - ./admin:/home/flask
    environment:
      - THREADS=without
    expose:
      - 5000
    ports:
      - 5005:5000
    depends_on:
      auth:
        condition: service_healthy
    command: /bin/bash -c "service filebeat start; flask run --host=0.0.0.0; "
    healthcheck:
      test: curl --fail -s http://localhost:5000/admin/api/v1/ || exit 1
      interval: 15s
      timeout: 10s
      retries: 3
    networks:
      - my-network
    env_file: .env

  cron:
    build:
      context: ./cron
      dockerfile: Dockerfile
    image: cron:${TAG}
    container_name: cron
    volumes:
      - ./cron:/app
    environment:
      - THREADS=without
    depends_on:
      auth:
        condition: service_healthy
      authpostgres:
        condition: service_healthy
    command: /bin/bash -c "bash start.sh; "
    networks:
      - my-network
    env_file: .env

  redis-auth:
    image: redis
    container_name: redis-auth
    restart: unless-stopped
    volumes:
      - ./redis/additional.conf:/additional.conf:ro
    expose:
      - 6379
    ports:
      - 6377:6379
    networks:
      - my-network
    command: redis-server /additional.conf

  jaeger:
    image: jaegertracing/all-in-one:1.39.0
    restart: always
    ports:
      - 6831:6831/udp
      - 16686:16686
    networks:
      - my-network

  rabbitmq-manager:
    image: rabbitmq:3.10-management
    container_name: rabbitmq
    hostname: rabbitmq
    restart: always
    ports:
      - 15672:15672
      - 5672:5672
    networks:
      - my-network
    healthcheck:
      test: rabbitmq-diagnostics -q status && rabbitmq-diagnostics -q check_local_alarms || exit 1
      interval: 10s
      timeout: 8s
      retries: 10

  logstash:
    image: logstash:7.10.1
    container_name: logstash
    environment:
      XPACK_MONITORING_ENABLED: "false"
      ES_HOST: "elasticsearch-log:9200"
    ports:
      - "5044:5044/udp"
      - "5045:5045"
    volumes:
      - ./elk/logstash/logstash.conf:/config/logstash.conf:ro
      - ./elk/logstash/patterns:/patterns:ro
    command: logstash -f /config/logstash.conf
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:9600" ]
      interval: 10s
      timeout: 5s
      retries: 10
    networks:
      - my-network

  elasticsearch-log:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.10.2
    container_name: elasticsearch-log
    environment:
      discovery.type: single-node
    ports:
      - 9200:9200
    volumes:
      - ./elk/tmp/esdata:/tmp/elasticsearch/data
    networks:
      - my-network

  kibana:
    image: docker.elastic.co/kibana/kibana:7.10.2
    container_name: kibana
    ports:
      - "5601:5601"
    volumes:
      - ./elk/kibana/kibana.yml:/usr/share/kibana/config/kibana.yml:ro
    depends_on:
      - elasticsearch-log
    networks:
      - my-network

  rabbit-create-queue-payments:
    container_name: rabbit-create-queue-payments
    networks:
      - my-network
    depends_on:
      rabbitmq-manager:
        condition: service_healthy
    image: rabbitmq:3.10-management
    entrypoint: rabbitmqadmin --host=rabbitmq declare queue --vhost=/ name=payments

  rabbit-create-queue:
    container_name: rabbit-create-queue
    networks:
      - my-network
    depends_on:
      rabbitmq-manager:
        condition: service_healthy
    image: rabbitmq:3.10-management
    entrypoint: rabbitmqadmin --host=rabbitmq declare queue --vhost=/ name=email.notification

  celery-redis:
    hostname: celery-redis
    container_name: celery-redis
    env_file:
      - .env
    environment:
      REDIS_HOST: $CELERY_REDIS_HOST
      REDIS_PORT: $CELERY_REDIS_PORT
      REDIS_PASSWORD: $CELERY_REDIS_PASSWORD
    image: bitnami/redis:7.0.5
    depends_on:
      rabbitmq-manager:
        condition: service_healthy
    healthcheck:
      test: redis-cli -a $CELERY_REDIS_PASSWORD ping || exit 1
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 5s
    ports:
      - 6379:6379
    networks:
      - my-network

  celery-worker:
    env_file:
      - .env
    build:
      context: ./ugc/email
      dockerfile: worker.Dockerfile
    image: celery-worker
    hostname: celery-worker
    container_name: celery-worker
    healthcheck:
      test: celery -b amqp://$RMQ_USER:$RMQ_PASSWORD@$RMQ_HOST:5672 inspect ping -d celery@celery-worker || exit 1
      interval: 10s
      timeout: 9s
      retries: 5
      start_period: 5s
    depends_on:
      rabbitmq-manager:
        condition: service_healthy
      celery-redis:
        condition: service_healthy
      mongo:
        condition: service_healthy
      mongo-init:
        condition: service_completed_successfully
      rabbit-create-queue:
        condition: service_completed_successfully
    networks:
      - my-network

  message2celery:
    env_file:
      - .env
    build:
      context: ./ugc/email
      dockerfile: message2celery.Dockerfile
    image: message2celery
    hostname: message2celery
    container_name: message2celery
    depends_on:
      celery-worker:
        condition: service_healthy
      mongo:
        condition: service_healthy
      mongo-init:
        condition: service_completed_successfully
      rabbit-create-queue:
        condition: service_completed_successfully
    networks:
      - my-network

  mongo:
    container_name: mongo-ugc
    hostname: mongo
    image: mongo
    ports:
      - 27017:27017
    expose:
      - "27017"
    volumes:
      - /etc/localtime:/etc/localtime:ro
    command: mongod --quiet --replSet mongors
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh mongo:27017/test --quiet
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 20s
    networks:
      - my-network

  mongo-init:
    container_name: mongo-init
    image: mongo
    volumes:
      - ./ugc/mongo/init/init_script.js:/mongo-init.js
    entrypoint: mongosh --quiet --host mongo /mongo-init.js
    depends_on:
      mongo:
        condition: service_healthy
    networks:
      - my-network

  payments-api:
    container_name: payments-api
    hostname: payments-api
    env_file:
      - .env
    depends_on:
      rabbitmq-manager:
        condition: service_healthy
      rabbit-create-queue:
        condition: service_completed_successfully
    image: yp_api_payments
    ports:
      - 8000:8000
    build:
      context: ./payments/api/
      dockerfile: Dockerfile
    volumes:
      - ./payments/api/templates/:/payments/api/templates/
    healthcheck:
      test: curl -sS http://127.0.0.1:8000/api/openapi || exit 1
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 5s
    networks:
      - my-network

  web-ui:
    container_name: web-ui
    hostname: web-ui
    env_file:
      - .env
    image: nginx:1.23.2
    volumes:
      - ./ui/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ui/cors-options-hack.conf:/etc/nginx/cors-options-hack.conf:ro
      - ./nginx_admin/auth_static:/etc/nginx/html/swaggerui:ro
      - ./ui/web:/web:ro
      - ./ui/ssl:/ssl:ro
    ports:
      - 80:80
      - 443:443
    networks:
      - my-network
    depends_on:
      auth:
        condition: service_healthy
      payments-api:
        condition: service_healthy

  payments-client:
    env_file:
      - .env
    build:
      context: ./payments-client
      dockerfile: Dockerfile
    image: payments-client:1.0
    hostname: payments-client
    container_name: payments-client
    healthcheck:
      test: curl -sS http://127.0.0.1:8080/subscriptions/api/openapi || exit 1
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 5s
    ports:
      - 8080:8080
    depends_on:
      - payments-api
      - auth
      - authpostgres
    networks:
      - my-network


networks:
    my-network:

