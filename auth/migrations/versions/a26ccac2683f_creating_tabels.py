"""creating tabels

Revision ID: a26ccac2683f
Revises:
Create Date: 2022-08-14 03:32:17.065213

"""
import sqlalchemy as sa  # type: ignore
from alembic import op
from sqlalchemy.dialects import postgresql  # type: ignore

# revision identifiers, used by Alembic.
revision = 'a26ccac2683f'
down_revision = None
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('ext_auth',
                    sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False, primary_key=True),
                    sa.Column('auth_source', sa.String(length=255), nullable=False),
                    sa.Column('auth_source_url', sa.String(length=255), nullable=False),
                    sa.PrimaryKeyConstraint('id'),
                    sa.UniqueConstraint('id'),
                    schema='customers'
                    )
    op.create_table('roles',
                    sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False, primary_key=True),
                    sa.Column('role', sa.String(length=64), nullable=True),
                    sa.Column('created_at', sa.DateTime(), nullable=False),
                    sa.Column('updated_at', sa.DateTime(), nullable=True),
                    sa.Column('deleted_at', sa.DateTime(), nullable=True),
                    sa.PrimaryKeyConstraint('id'),
                    sa.UniqueConstraint('id'),
                    schema='customers'
                    )
    op.create_table('payments_log',
                    sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False, primary_key=True),
                    sa.Column('subscription_id', postgresql.UUID(as_uuid=True), nullable=False),
                    sa.Column('event_time', sa.DateTime(), nullable=False),
                    sa.Column('provider', sa.String(length=64), nullable=False),
                    sa.Column('status', sa.String(length=64), nullable=False),
                    sa.Column('raw', postgresql.JSON()),
                    schema='customers'
                    )
    op.create_table('subscribtion',
                    sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False, primary_key=True),
                    sa.Column('user_id', postgresql.UUID(as_uuid=True), nullable=False),
                    sa.Column('invoce_created', sa.DateTime(), nullable=False),
                    sa.Column('payment_datetime', sa.DateTime(), nullable=False),
                    sa.Column('start_subscribtion', sa.DateTime(), nullable=False),
                    sa.Column('subscribtion_expiration_datetime', sa.DateTime(), nullable=False),
                    sa.Column('payment_status', sa.String(length=64), nullable=False),
                    sa.Column('price_id', postgresql.UUID(as_uuid=True), nullable=False),
                    sa.Column('auto_renewal', sa.Boolean(), nullable=False),
                    sa.Column('transaction_id', sa.String(length=512)),
                    sa.Column('payment_token', sa.String(length=512)),
                    schema='customers'
                    )
    op.create_table('price',
                    sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False, primary_key=True),
                    sa.Column('duration', sa.Float(), nullable=False),
                    sa.Column('price', sa.Float(), nullable=False),
                    sa.Column('currency', sa.String(length=32), nullable=False),
                    sa.Column('created_at', sa.DateTime(), nullable=False),
                    sa.Column('admin_id', sa.String(length=64), nullable=False),
                    sa.Column('is_active', sa.Boolean(), nullable=False),
                    sa.Column('updated_at', sa.DateTime(), nullable=True),
                    schema='customers'
                    )
    op.create_table('confirm_email',
                    sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False, primary_key=True),
                    sa.Column('user_id', postgresql.UUID(as_uuid=True), nullable=False),
                    sa.Column('exp_confirm_email', sa.DateTime(), nullable=False),
                    sa.Column('created_at', sa.DateTime(), nullable=False),
                    schema='customers'
                    )
    op.create_table('users',
                    sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False, primary_key=True),
                    sa.Column('login', sa.String(), nullable=True),
                    sa.Column('password', sa.String(), nullable=False),
                    sa.Column('email', sa.String(length=64), nullable=True),
                    sa.Column('created_at', sa.String(), nullable=False),
                    sa.Column('updated_at', sa.DateTime(), nullable=True),
                    sa.Column('deleted_at', sa.DateTime(), nullable=True),
                    sa.Column('role_id', postgresql.UUID(as_uuid=True), nullable=False),
                    sa.Column('user_ext_id', sa.String(), nullable=True),
                    sa.Column('ext_auth_source_id', postgresql.UUID(as_uuid=True), nullable=True),
                    sa.Column('is_active', sa.Boolean(), nullable=False),
                    sa.Column('email_notification', sa.Boolean(), nullable=False),
                    sa.Column('ws_notification', sa.Boolean(), nullable=False),
                    sa.Column('confirm_email_status', sa.Boolean(), nullable=False),
                    sa.ForeignKeyConstraint(['ext_auth_source_id'], ['customers.ext_auth.id'], ),
                    sa.ForeignKeyConstraint(['role_id'], ['customers.roles.id'], ),
                    sa.PrimaryKeyConstraint('id', 'is_active'),
                    sa.UniqueConstraint('id', 'is_active'),
                    sa.UniqueConstraint('email', 'is_active'),
                    schema='customers',
                    postgresql_partition_by='LIST (is_active)'
                    )
    op.create_table('users_logs',
                    sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False, primary_key=True),
                    sa.Column('user_id', postgresql.UUID(as_uuid=True), nullable=False),
                    sa.Column('user_agent', sa.String(length=255), nullable=True),
                    sa.Column('user_action', sa.String(length=64), nullable=True),
                    sa.Column('created_at', sa.DateTime(), nullable=False),
                    sa.PrimaryKeyConstraint('id'),
                    sa.UniqueConstraint('id'),
                    schema='customers'
                    )
    op.execute("CREATE TABLE customers.users_is_active PARTITION OF customers.users for values in (true);")
    op.execute("CREATE TABLE customers.users_is_not_active PARTITION OF customers.users for values in (false);")
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('users_logs', schema='customers')
    op.drop_table('users', schema='customers')
    op.drop_table('roles', schema='customers')
    op.drop_table('ext_auth', schema='customers')
    op.drop_table('confirm_email', schema='customer')
    op.drop_table('price', schema='customer')
    op.drop_table('subscribtion', schema='customer')
    op.drop_table('payments_log', schema='customer')
    # ### end Alembic commands ###
